// Generated by CoffeeScript 1.6.3
(function() {
  var Backbone, Project, RESTController, app, async, bootstrap, express, kb, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  async = require('async');

  if (typeof window !== "undefined" && window !== null) {
    kb = require('knockback');
    Project = (function(_super) {
      __extends(Project, _super);

      function Project() {
        _ref = Project.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Project.prototype.urlRoot = '/projects';

      Project.prototype.sync = require('backbone-http').sync(Project);

      return Project;

    })(Backbone.Model);
    window.AppViewModel = (function() {
      function AppViewModel() {
        var _this = this;
        this.projects = kb.collectionObservable(new Backbone.Collection());
        Project.find({
          $limit: 3,
          $sort: '-name'
        }, function(err, models) {
          return _this.projects.collection().reset(models);
        });
      }

      AppViewModel.prototype.onSave = function(vm) {
        return vm.model().save(function() {});
      };

      return AppViewModel;

    })();
  }

  if (typeof window === "undefined" || window === null) {
    express = require('express');
    app = express();
    app.use(express.bodyParser());
    app.use(express["static"](__dirname));
    app.get('/', function(req, res) {
      return res.sendfile('./index.html');
    });
    app.listen(3000);
    Project = (function(_super) {
      __extends(Project, _super);

      function Project() {
        _ref1 = Project.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Project.prototype.urlRoot = 'mongodb://localhost:27017/demo/projects';

      Project.prototype.sync = require('backbone-mongo').sync(Project);

      return Project;

    })(Backbone.Model);
    RESTController = require('backbone-rest');
    new RESTController(app, {
      model_type: Project,
      route: '/projects'
    });
    bootstrap = function(index, callback) {
      return Project.findOrCreate({
        index: index,
        name: "Project " + index
      }, callback);
    };
    async.each([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], bootstrap, function() {
      return Project.find({
        $limit: 5,
        $sort: 'name'
      }, function(err, models) {
        var model, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          _results.push(console.log("find: " + (model.get('name'))));
        }
        return _results;
      });
    });
  }

}).call(this);
